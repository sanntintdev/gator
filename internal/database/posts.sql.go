// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: posts.sql

package database

import (
	"context"
	"database/sql"
)

const createPost = `-- name: CreatePost :one
INSERT INTO posts (title, url, description, published_at, feed_id, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, Now(), Now())
RETURNING id
`

type CreatePostParams struct {
	Title       string
	Url         string
	Description string
	PublishedAt sql.NullTime
	FeedID      int32
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createPost,
		arg.Title,
		arg.Url,
		arg.Description,
		arg.PublishedAt,
		arg.FeedID,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const retrievePostsForUser = `-- name: RetrievePostsForUser :many
SELECT id, title, url, description, published_at, feed_id, created_at, updated_at
FROM posts
ORDER BY published_at DESC
LIMIT $1
`

func (q *Queries) RetrievePostsForUser(ctx context.Context, limit int32) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, retrievePostsForUser, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Url,
			&i.Description,
			&i.PublishedAt,
			&i.FeedID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
